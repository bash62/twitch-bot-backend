scalar JSON
scalar Date
scalar relation

type User {
  # Example field (placeholder)

  id: Int
  twitch_id: Int
  username: String
  email: String
  profile_image_url: String
  description: String
  view_count: Int
  created_at: Date
  tokens: JSON!
  role: Role!
  channels: [UsersOnChannels!]! 
}

type UsersOnChannels {
  user: User
  channel: Channel
  user_id: Int
  channel_id: Int
  config: JSON
}

input CreateUserInput {
  
  twitch_id: Int!
  username: String!
  email: String!
  profile_image_url: String!
  description: String!
  view_count: Int!
  created_at: Date!
  tokens: JSON!
  role: Role!


}

input UpdateUserInput {
  id: Int!
  username: String
  config: JSON
  role: Role
  
}

input UpdateUserChannelInput{
  user_id: Int!
  channel_id: Int!
  config: JSON
}

type Query {
  users: [User]!
  user(user_id: Int!): User
  getAllUserChannels(user_id: Int!): [UsersOnChannels!]!
}

type Mutation {
  createUser(createUserInput: CreateUserInput!): User!
  updateUser(updateUserInput: UpdateUserInput!): User!
  appendChannel(updateUserChannelInput:UpdateUserChannelInput!): UsersOnChannels!
  removeUserOnChannel(updateUserChannelInput:UpdateUserChannelInput!): UsersOnChannels!
  removeUser(user_id: Int!): User
}

enum Role {
  USER
  USER_PREMIUM
  ADMIN
}

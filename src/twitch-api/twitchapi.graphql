scalar JSON

type TwitchApi {
    api_endpoint: ApiRoute,
}

input TwitchApiOptions {
  api_endpoint: String,
  token_oauth: String,
  broadcaster_id: Int!,
  data: JSON
}

input TwitchConnectionPayload{
  client_id: 	String!, 	#Your app’s registered client ID.
  force_verify: 	Boolean!, 	#Set to true to force the user to re-authorize your app’s access to their resources. The default is false.
  redirect_uri: 	String!, 	#Your app’s registered redirect URI. The access token is sent to this URI.
  response_type: 	 	String! = "token", 	#Must be set to token.
  scope: 	String! = "", 	#A space-delimited list of scopes. The APIs that you’re calling identify the scopes you must list. You must URL encode the list.
  state: 	String, 	#Although optional, you are strongly encouraged to pass a state string to help prevent Cross-Site Request Forgery (CSRF) attacks. The server returns this string to you in your redirect URI (see the state parameter in the fragment portion of the URI). If this string doesn’t match the state string that you passed, ignore the response. The state string should be randomly generated and unique for each OAuth request.
}

input TwitchApiPayload {

  url: String
}
enum ApiReturnCode {
    RESPONSE_SUCESS, 	#Channel/Stream returned successfully
    REPONSE_MISSING_PARAMS, 	#Missing Query Parameter
    RESPONSE_INTERNAL_ERROR 	#Internal Server Error; Failed to get channel information
}

enum ApiRoute {
  GET_CHANNELS_BY_ID,
  GET_USER_BY_ID,
}


type TwitchGetChannelResponse {

  users: JSON
  broadcaster_id: 	String 	#Twitch User ID of this channel owner.
  broadcaster_login: 	String 	#Broadcaster’s user login name.
  broadcaster_name: 	String 	#Twitch user display name of this channel owner.
  game_name: 	String 	#Name of the game being played on the channel.
  game_id: 	String 	#Current game ID being played on the channel.
  broadcaster_language: 	String 	#Language of the channel. A language value is either the ISO 639-1 two-letter code for a supported stream language or “other”.
  title: String 	#Title of the stream.
  delay: Int 	#Stream delay in seconds.

}


type Query {
  getChannelInfoById(broadcaster_id: Int): TwitchGetChannelResponse

}


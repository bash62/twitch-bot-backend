scalar JSON

type TwitchApi {
    api_endpoint: ApiRoute,
}

input TwitchApiOptions {
  api_endpoint: String,
  token_oauth: String,
  broadcaster_id: Int!,
  data: JSON
}
input AccessTokenResponse {
  access_token: String,
  refresh_token: String,
  expires_in: Int,
}

input GetChannelInfoResponse {
  
    broadcaster_id: String,
    broadcaster_login: String,
    broadcaster_name: String,
    broadcaster_language: String,
    game_id: String,
    game_name: String,
    title: String,
    delay: Int,
}

input TwitchApiPayload {

  url: String
}
enum ApiReturnCode {
    RESPONSE_SUCESS, 	#Channel/Stream returned successfully
    REPONSE_MISSING_PARAMS, 	#Missing Query Parameter
    RESPONSE_INTERNAL_ERROR 	#Internal Server Error; Failed to get channel information
}

enum ApiRoute {
  GET_CHANNELS_BY_ID,
  GET_USER_BY_ID,
}

input BroadCasterIds {
  broadcaster_id: [Int]
}
input UserIds {
  twitch_id: [Int]
  login_name: [String]
}
type TwitchGetChannelResponse {

  broadcaster_id: 	String 	#Twitch User ID of this channel owner.
  broadcaster_login: 	String 	#Broadcaster’s user login name.
  broadcaster_name: 	String 	#Twitch user display name of this channel owner.
  game_name: 	String 	#Name of the game being played on the channel.
  game_id: 	String 	#Current game ID being played on the channel.
  broadcaster_language: 	String 	#Language of the channel. A language value is either the ISO 639-1 two-letter code for a supported stream language or “other”.
  title: String 	#Title of the stream.
  delay: Int 	#Stream delay in seconds.

}

type TwitchGetUserResponse {
  id: String
  login: String
  display_name: String
  type: String
  broadcaster_type: String
  description: String
  profile_image_url: String
  offline_image_url: String
  view_count: Int
  email: String,
  created_at: Date
}

type Query {
  getChannelInfoById(broadcaster_ids: BroadCasterIds): [TwitchGetChannelResponse]
  getUserInfoByIdOrUsername(userIds: UserIds): [TwitchGetUserResponse]

}

